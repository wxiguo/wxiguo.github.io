<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>燚龍</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.xiguo.wang/"/>
  <updated>2019-06-28T13:52:33.000Z</updated>
  <id>https://blog.xiguo.wang/</id>
  
  <author>
    <name>YiLong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache kafka（三）Kafka与Spring整合</title>
    <link href="https://blog.xiguo.wang/2018/05/10/ApacheKafka-3/"/>
    <id>https://blog.xiguo.wang/2018/05/10/ApacheKafka-3/</id>
    <published>2018-05-10T14:11:21.000Z</published>
    <updated>2019-06-28T13:52:33.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="Kafka与Spring整合"><a href="#Kafka与Spring整合" class="headerlink" title="Kafka与Spring整合"></a>Kafka与Spring整合</h3><p><code>maven</code>依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">groupId</span>></span>org.springframework.boot<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">artifactId</span>></span>spring-boot-starter-web<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">version</span>></span>2.1.6.RELEASE<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">   <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line">   <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">groupId</span>></span>org.springframework.kafka<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">artifactId</span>></span>spring-kafka<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">version</span>></span>2.2.7.RELEASE<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">   <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><h5 id="基于配置"><a href="#基于配置" class="headerlink" title="基于配置"></a>基于配置</h5><p><code>application-Kafka.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><!-- 定义producer的参数 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"producerProperties"</span> <span class="attr">class</span>=<span class="string">"java.util.HashMap"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">map</span>></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bootstrap.servers"</span> <span class="attr">value</span>=<span class="string">"localhost:9092"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"client.id"</span> <span class="attr">value</span>=<span class="string">"KafkaProducer"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"acks"</span> <span class="attr">value</span>=<span class="string">"all"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key.serializer"</span> <span class="attr">value</span>=<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"value.serializer"</span> <span class="attr">value</span>=<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>/></span></span><br><span class="line">           <span class="tag"></<span class="name">map</span>></span></span><br><span class="line">       <span class="tag"></<span class="name">constructor-arg</span>></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 创建kafkatemplate需要使用的producerfactory bean --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"producerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.kafka.core.DefaultKafkaProducerFactory"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"producerProperties"</span>/></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 创建kafkatemplate bean，使用的时候，只需要注入这个bean，即可使用template的send消息方法 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"producerTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.kafka.core.KafkaTemplate"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"producerFactory"</span>/></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"autoFlush"</span> <span class="attr">value</span>=<span class="string">"true"</span>/></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br></pre></td></tr></tbody></table></figure><p><code>ProducerController.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerController</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doTest</span><span class="params">()</span> </span>{</span><br><span class="line">        kafkaTemplate.send(<span class="string">"my-topic"</span>, <span class="string">"Hello World"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h5><p><code>application.properties</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Kafka configs</span><br><span class="line">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class="line">spring.kafka.client-id=KafkaProducer</span><br><span class="line">spring.kafka.acks=all</span><br><span class="line">app.topic.foo=my-topic</span><br></pre></td></tr></tbody></table></figure><p><code>SenderConfig.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SenderConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.bootstrap-servers}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.client-id}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.acks}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String acks;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map<String, Object> <span class="title">producerConfigs</span><span class="params">()</span> </span>{</span><br><span class="line">        Map<String, Object> props = <span class="keyword">new</span> HashMap<>();</span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line">        props.put(ProducerConfig.CLIENT_ID_CONFIG, clientId);</span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG, acks);</span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory<String, String> <span class="title">producerFactory</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory<>(producerConfigs());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate<String, String> <span class="title">kafkaTemplate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate<>(producerFactory());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Sender.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate<String, String> kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${app.topic.foo}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>{</span><br><span class="line">        kafkaTemplate.send(topic, <span class="string">"topic_key"</span>, <span class="string">"Hello Word!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><h5 id="基于配置-1"><a href="#基于配置-1" class="headerlink" title="基于配置"></a>基于配置</h5><p><code>application-Kafka.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.example.listener"</span>/></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 定义consumer的参数 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"consumerProperties"</span> <span class="attr">class</span>=<span class="string">"java.util.HashMap"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span>></span></span><br><span class="line">           <span class="tag"><<span class="name">map</span>></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bootstrap.servers"</span> <span class="attr">value</span>=<span class="string">"localhost:9092"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"group.id"</span> <span class="attr">value</span>=<span class="string">"KafkaConsumer"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"enable.auto.commit"</span> <span class="attr">value</span>=<span class="string">"true"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"auto.commit.interval.ms"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key.deserializer"</span> <span class="attr">value</span>=<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>/></span></span><br><span class="line">               <span class="tag"><<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"value.deserializer"</span> <span class="attr">value</span>=<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>/></span></span><br><span class="line">           <span class="tag"></<span class="name">map</span>></span></span><br><span class="line">       <span class="tag"></<span class="name">constructor-arg</span>></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 实际执行消息消费的类 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"registryListener"</span> <span class="attr">class</span>=<span class="string">"com.example.listener.RegistryServers"</span>/></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 创建consumerFactory bean --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"consumerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.kafka.core.DefaultKafkaConsumerFactory"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"consumerProperties"</span>/></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 消费者容器配置信息 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"containerProperties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.kafka.listener.ContainerProperties"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"topics"</span> <span class="attr">value</span>=<span class="string">"my-topic"</span>/></span></span><br><span class="line">       <span class="tag"><<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"registryListener"</span>/></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br><span class="line"></span><br><span class="line">   <span class="comment"><!-- 消费者并发消息监听容器，执行doStart()方法 --></span></span><br><span class="line">   <span class="tag"><<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"messageListenerContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.kafka.listener.KafkaMessageListenerContainer"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">init-method</span>=<span class="string">"doStart"</span>></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"consumerFactory"</span>/></span></span><br><span class="line">       <span class="tag"><<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"containerProperties"</span>/></span></span><br><span class="line">   <span class="tag"></<span class="name">bean</span>></span></span><br></pre></td></tr></tbody></table></figure><p><code>RegistryServers.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryServers</span> <span class="keyword">implements</span> <span class="title">MessageListener</span><<span class="title">String</span>, <span class="title">String</span>> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ConsumerRecord record)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"接收到消息："</span>);</span><br><span class="line">        System.out.println(record.value());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="基于注解-1"><a href="#基于注解-1" class="headerlink" title="基于注解"></a>基于注解</h5><p><code>application.properties</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Kafka configs</span><br><span class="line">spring.kafka.bootstrap-servers=localhost:9092</span><br><span class="line">spring.kafka.group-id=KafkaConsumer</span><br><span class="line">spring.kafka.enable-auto-commit=true</span><br><span class="line">spring.kafka.auto-commit-interval-ms=1000</span><br><span class="line">spring.kafka.auto-offset-reset=earliest</span><br><span class="line">app.topic.foo=my-topic</span><br></pre></td></tr></tbody></table></figure><p><code>ReceiverConfig.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.bootstrap-servers}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.group-id}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String groupId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.enable-auto-commit}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String enableAutoCommit;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.auto-commit-interval-ms}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoCommitIntervalMs;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"${spring.kafka.auto-offset-reset}"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoOffsetReset;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map<String, Object> <span class="title">consumerConfigs</span><span class="params">()</span> </span>{</span><br><span class="line">        Map<String, Object> props = <span class="keyword">new</span> HashMap<>();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, enableAutoCommit);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, autoCommitIntervalMs);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerFactory <span class="title">consumerFactory</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory<>(consumerConfigs());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> kafkaListenerContainerFactory() {</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory<String, String> factory = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory<>();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>Receiver.java</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = <span class="string">"${app.topic.foo}"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ConsumerRecord record)</span> </span>{</span><br><span class="line">        System.out.println(String.format(<span class="string">"key: %s and value: %s"</span>, record.key(), record.value()));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h3><ul><li><a href="https://spring.io/projects/spring-kafka" target="_blank" rel="noopener">Spring for Apache Kafka</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      Kafka与Spring整合
    
    </summary>
    
      <category term="Apache Kafka" scheme="https://blog.xiguo.wang/categories/Apache-Kafka/"/>
    
    
      <category term="Apache" scheme="https://blog.xiguo.wang/tags/Apache/"/>
    
      <category term="Kafka" scheme="https://blog.xiguo.wang/tags/Kafka/"/>
    
      <category term="Java" scheme="https://blog.xiguo.wang/tags/Java/"/>
    
      <category term="Spring" scheme="https://blog.xiguo.wang/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Apache kafka（二）简单生产者、消费者组示例</title>
    <link href="https://blog.xiguo.wang/2018/04/27/ApacheKafka-2/"/>
    <id>https://blog.xiguo.wang/2018/04/27/ApacheKafka-2/</id>
    <published>2018-04-27T13:31:20.000Z</published>
    <updated>2019-06-27T12:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="APIS"><a href="#APIS" class="headerlink" title="APIS"></a>APIS</h3><p>Kafka包括五个核心apis：</p><ol><li>Producer API：允许应用程序将数据流发送到Kafka集群中的主题。</li><li>Consumer API：允许应用程序从Kafka集群中的主题读取数据流。</li><li>Streams API：允许将输入主题的数据流转换为输出主题。</li><li>Connect API：允许实现从某些源系统或应用程序不断拉入Kafka或从Kafka推送到某个接收器系统或应用程序的连接器。</li><li>AdminClient API：允许管理和检查主题，代理和其他Kafka对象。</li></ol><p>Kafka通过独立于语言的协议公开其所有功能，该协议具有许多编程语言的客户端。</p><h3 id="简单生产者"><a href="#简单生产者" class="headerlink" title="简单生产者"></a>简单生产者</h3><p>Producer API允许应用程序将数据流发送到Kafka集群中的主题。</p><p>maven依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>org.apache.kafka<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>kafka-clients<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>2.3.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></tbody></table></figure><p>生产者是线程安全的，跨线程共享单个生成器实例通常比拥有多个实例更快。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>,<span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.put(<span class="string">"acks"</span>,<span class="string">"all"</span>);</span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        Producer producer = <span class="keyword">new</span> KafkaProducer<>(props);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++){</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord<>(<span class="string">"my-topic"</span>, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">        }</span><br><span class="line">        producer.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>生产者包含一个缓存控制池，用于保存尚未传输到服务器的记录，以及一个后台 I/O 线程，负责将这些记录转换为请求并将它们传输到集群。 没有在使用后关闭生产者将泄漏这些资源。</p><p><code>send()</code> 方法是异步的。 调用时，它会将记录添加到待处理记录发送的缓冲区中并立即返回。 这允许生产者将各个记录一起批处理以提高效率。</p><p><code>acks</code> 配置控制认为请求完成的标准。 我们指定的“all”设置将导致完全提交记录时阻塞，这是最慢但最耐用的设置。</p><h4 id="生产者可选配置"><a href="#生产者可选配置" class="headerlink" title="生产者可选配置"></a>生产者可选配置</h4><table><thead><tr><th>No.</th><th><strong>配置设置</strong></th><th><strong>配置说明</strong></th></tr></thead><tbody><tr><td>1</td><td>client.id</td><td>标识生产者应用程序</td></tr><tr><td>2</td><td>producer.type</td><td>同步或异步</td></tr><tr><td>3</td><td>acks</td><td>acks 配置表示 producer 发送消息到 broker 上以后的确认值。<br>0：表示 producer 不需要等待 broker 的消息确认。这个选项时延最小但同时风险最大（因为当 server 宕机时，数据将会丢失） 。<br>1：表示 producer 只需要获得 kafka 集群中的 leader 节点确认即可，这个选择时延较小同时确保了 leader 节点确认接收成功。<br>all(-1)：需要 ISR 中所有的 Replica 给予接收确认，速度最慢，安全性最高，但是由于 ISR 可能会缩小到仅包含一个 Replica，所以设置参数为 all 并不能一定避免数据丢失。</td></tr><tr><td>4</td><td>retries</td><td>如果生产者请求失败，则会自动重试具体值。</td></tr><tr><td>5</td><td>bootstrap.servers</td><td>经纪人的引导列表。</td></tr><tr><td>6</td><td>linger.ms</td><td>如果要减少请求数，可以将linger.ms设置为大于某值的值。Producer 默认会把两次发送时间间隔内收集到的所有 Requests 进行一次聚合然后再发送，以此提高吞吐量，而 linger.ms 就是为每次发送到 broker 的请求增加一些 delay，以此来聚合更多的 Message 请求。</td></tr><tr><td>7</td><td>key.serializer</td><td>串行器接口的关键。</td></tr><tr><td>8</td><td>value.serializer</td><td>串行器接口的值。</td></tr><tr><td>9</td><td>batch.size</td><td>缓冲区大小。生产者发送多个消息到 broker 上的同一个分区时，为了减少网络请求带来的性能开销，通过批量的方式来提交消息，可以通过这个参数来控制批量提交的字节数大小，默认大小是 16384byte,也就是 16kb，意味着当一批消息大小达到指定的 batch.size 的时候会统一发送。</td></tr><tr><td>10</td><td>buffer.memory</td><td>控制生产者可用于缓冲的总内存量。</td></tr><tr><td>11</td><td>max.request.size</td><td>设置请求的数据的最大字节数，为了防止发生较大的数据包影响到吞吐量，默认值为 1MB。</td></tr></tbody></table><h4 id="ProducerRecord-类参数"><a href="#ProducerRecord-类参数" class="headerlink" title="ProducerRecord 类参数"></a>ProducerRecord 类参数</h4><ul><li><strong>String topic</strong> - 创建主题以分配记录</li><li><strong>K key</strong> - 键记录</li><li><strong>V value</strong> - 记录内容</li></ul><h4 id="单一事务示例"><a href="#单一事务示例" class="headerlink" title="单一事务示例"></a>单一事务示例</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.put(<span class="string">"transactional.id"</span>, <span class="string">"my-transactional-id"</span>);</span><br><span class="line">        Producer<String, String> producer = <span class="keyword">new</span> KafkaProducer<>(props, <span class="keyword">new</span> StringSerializer(), <span class="keyword">new</span> StringSerializer());</span><br><span class="line"></span><br><span class="line">        producer.initTransactions();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            producer.beginTransaction();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i < <span class="number">100</span>; i++)</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord<>(<span class="string">"my-topic"</span>, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">            producer.commitTransaction();</span><br><span class="line">        } <span class="keyword">catch</span> (ProducerFencedException | OutOfOrderSequenceException | AuthorizationException e) {</span><br><span class="line">            <span class="comment">// 异常，关闭生产者</span></span><br><span class="line">            producer.close();</span><br><span class="line">        } <span class="keyword">catch</span> (KafkaException e) {</span><br><span class="line">            <span class="comment">// 异常，重试</span></span><br><span class="line">            producer.abortTransaction();</span><br><span class="line">        }</span><br><span class="line">        producer.close();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>每个生产者只能有一个开放交易。 在 <code>beginTransaction()</code> 和 <code>commitTransaction()</code> 调用之间发送的所有消息都将是单个事务的一部分。 指定 <code>transactional.id</code> 时，生产者发送的所有消息都必须是事务的一部分。</p><h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><p>Consumer API允许应用程序从Kafka集群中的主题读取数据流。</p><p>maven依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>org.apache.kafka<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>kafka-clients<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>2.3.0<span class="tag"></<span class="name">version</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></tbody></table></figure><p>Kafka消费者不是线程安全的。 所有网络 I/O 都发生在进行调用的应用程序的线程中。此规则的唯一例外是<code>wakeup()</code>，它可以安全地从外部线程用于中断活动操作。 在这种情况下，将从操作的线程阻塞中抛出<code>WakeupException</code>。 这可以用于从另一个线程关闭使用者。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><h5 id="自动抵消提交"><a href="#自动抵消提交" class="headerlink" title="自动抵消提交"></a>自动抵消提交</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"enable.auto.commit"</span>, <span class="string">"true"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        KafkaConsumer<String, String> consumer = <span class="keyword">new</span> KafkaConsumer<>(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"my-topic"</span>, <span class="string">"foo"</span>, <span class="string">"bar"</span>));</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMinutes(<span class="number">100</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord<String, String> record : records) {</span><br><span class="line">                System.out.println(String.format(<span class="string">"offset = %d, key = %s, value = %s%n"</span>, record.offset(), record.key(), record.value()));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="手动偏移控制"><a href="#手动偏移控制" class="headerlink" title="手动偏移控制"></a>手动偏移控制</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        KafkaConsumer<String, String> consumer = <span class="keyword">new</span> KafkaConsumer<>(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"my-topic"</span>, <span class="string">"foo"</span>, <span class="string">"bar"</span>));</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> minBatchSize = <span class="number">200</span>;</span><br><span class="line">        List<ConsumerRecord<String, String>> buffer = <span class="keyword">new</span> ArrayList<>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(<span class="number">100</span>));</span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord<String, String> record : records) {</span><br><span class="line">                buffer.add(record);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (buffer.size() >= minBatchSize) {</span><br><span class="line">                <span class="comment">// 业务处理</span></span><br><span class="line"><span class="comment">//                insertIntoDb(buffer);</span></span><br><span class="line">                System.out.println(buffer.toString());</span><br><span class="line">                consumer.commitSync();</span><br><span class="line">                buffer.clear();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面的示例使用commitSync将所有已接收的记录标记为已提交。 在某些情况下，您可能希望通过明确指定偏移量来更好地控制已提交的记录。 在下面的示例中，我们在完成处理每个分区中的记录后提交偏移量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">"bootstrap.servers"</span>, <span class="string">"localhost:9092"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"group.id"</span>, <span class="string">"test"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.setProperty(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        KafkaConsumer<String, String> consumer = <span class="keyword">new</span> KafkaConsumer<>(props);</span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"my-topic"</span>, <span class="string">"foo"</span>, <span class="string">"bar"</span>));</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(Long.MAX_VALUE));</span><br><span class="line">                <span class="keyword">for</span> (TopicPartition partition : records.partitions()) {</span><br><span class="line">                    List<ConsumerRecord<String, String>> partitionRecords = records.records(partition);</span><br><span class="line">                    <span class="keyword">for</span> (ConsumerRecord<String, String> record : partitionRecords) {</span><br><span class="line">                        System.out.println(record.offset() + <span class="string">": "</span> + record.value());</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">long</span> lastOffset = partitionRecords.get(partitionRecords.size() - <span class="number">1</span>).offset();</span><br><span class="line">                    consumer.commitSync(Collections.singletonMap(partition, <span class="keyword">new</span> OffsetAndMetadata(lastOffset + <span class="number">1</span>)));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            consumer.close();</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>注意：提交的偏移量应始终是应用程序将读取的下一条消息的偏移量。 因此，在调用commitSync（偏移量）时，您应该在最后处理的消息的偏移量中添加一个。</p></blockquote><h4 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h4><table><thead><tr><th>No.</th><th><strong>配置设置</strong></th><th><strong>配置说明</strong></th></tr></thead><tbody><tr><td>1</td><td>group.id</td><td>消费组id。不同消费组都可以获取到生产内容，同一消费组内只有一个 consumer 可以消费。</td></tr><tr><td>2</td><td>enable.auto.commit</td><td>消费者消费消息以后自动提交，只有当消息提交以后，该消息才不会被再次接收到，还可以配合 auto.commit.interval.ms 控制自动提交的频率。当然，我们也可以通过 consumer.commitSync()的方式实现手动提交。</td></tr><tr><td>3</td><td>auto.offset.reset</td><td>auto.offset.reset=latest 情况下，新的消费者将会从其他消费者最后消费的offset 处开始消费 Topic 下的消息。<br>auto.offset.reset= earliest 情况下，新的消费者会从该 topic 最早的消息开始消费。<br>auto.offset.reset=none 情况下，新的消费者加入以后，由于之前不存在offset，则会直接抛出异常。</td></tr><tr><td>4</td><td>max.poll.records</td><td>此设置限制每次调用 poll 返回的消息数，这样可以更容易的预测每次 poll 间隔要处理的最大值。通过调整此值，可以减少 poll 间隔。</td></tr></tbody></table><h3 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h3><ul><li><a href="https://kafka.apache.org" target="_blank" rel="noopener">Kafka官网</a></li><li><a href="https://kafka.apache.org/23/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html" target="_blank" rel="noopener">Kafka 2.3 Javadoc</a></li><li><a href="https://www.w3cschool.cn/apache_kafka/apache_kafka_simple_producer_example.html" target="_blank" rel="noopener">W3Cschool Apache Kafka 教程</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      Kafka简单生产者、消费者组示例
    
    </summary>
    
      <category term="Apache Kafka" scheme="https://blog.xiguo.wang/categories/Apache-Kafka/"/>
    
    
      <category term="Apache" scheme="https://blog.xiguo.wang/tags/Apache/"/>
    
      <category term="Kafka" scheme="https://blog.xiguo.wang/tags/Kafka/"/>
    
      <category term="Java" scheme="https://blog.xiguo.wang/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Apache kafka（一）简介及入门</title>
    <link href="https://blog.xiguo.wang/2018/04/25/ApacheKafka-1/"/>
    <id>https://blog.xiguo.wang/2018/04/25/ApacheKafka-1/</id>
    <published>2018-04-25T01:28:40.000Z</published>
    <updated>2019-06-26T12:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Kafka是一个分布式流处理平台。Kafka于2009年源自Linkedin，随后于2011年初开源，并于2012年10月23由Apache Incubator孵化出站。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。</p><h4 id="流处理平台三个关键功能"><a href="#流处理平台三个关键功能" class="headerlink" title="流处理平台三个关键功能"></a>流处理平台三个关键功能</h4><ul><li>发布和订阅记录流，类似于消息队列或企业消息传递系统。</li><li>以容错持久的方式存储记录流。</li><li>处理记录发生的流。</li></ul><h4 id="Kafka通常用于两大类应用"><a href="#Kafka通常用于两大类应用" class="headerlink" title="Kafka通常用于两大类应用"></a>Kafka通常用于两大类应用</h4><ul><li>构建可在系统或应用程序之间可靠获取数据的实时流数据管道</li><li>构建实时流应用程序，用于转换或相应数据流</li></ul><h4 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h4><ul><li>Kafka作为一个集群运行在一台或多台可以跨越多个数据中心的服务器上。</li><li>Kafka集群在称为主题的类别中存储记录流。</li><li>每个记录由一个键，一个值和一个时间戳组成。</li></ul><h3 id="Kafka-的架构"><a href="#Kafka-的架构" class="headerlink" title="Kafka 的架构"></a>Kafka 的架构</h3><p>Kafka架构的主要术语包括Topic、Record和Broker。Topic由Record组成，Record持有不同的信息，而Broker则负责复制消息。</p><h4 id="四个核心-API"><a href="#四个核心-API" class="headerlink" title="四个核心 API"></a>四个核心 API</h4><ul><li>生产者API：支持应用发布Record流。</li><li>消费者API：支持应用程序订阅Topic和处理Record流。</li><li>Stream API：将输入流转换为输出流，并产生结果。</li><li>Connector API：执行可重用的生产者和消费者API，可将Topic链接到现有应用程序。</li></ul><p><img src="/images/kafka-apis.png" alt="Kafka-apis"></p><h3 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h3><blockquote><p>基于Unix平台上使用<code>bin/</code>，脚本扩展名为<code>.sh</code> 。</p><p>WIndows平台上使用<code>bin\windows\</code>，并且脚本扩展名为<code>.bat</code>。</p><p>以下命令均在Windows平台执行。</p></blockquote><h4 id="第1步：下载代码"><a href="#第1步：下载代码" class="headerlink" title="第1步：下载代码"></a>第1步：下载代码</h4><p><a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/1.1.0/kafka_2.11-2.3.0.tgz" target="_blank" rel="noopener">下载</a> 2.3.0版本并解压它。Windows平台直接解压。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>cd kafka_2.12-2.3.0</span><br></pre></td></tr></tbody></table></figure><h4 id="第2步：启动服务器"><a href="#第2步：启动服务器" class="headerlink" title="第2步：启动服务器"></a>第2步：启动服务器</h4><p>Kafka使用ZooKeeper，首先启动ZooKeeper服务器，使用Kafka打包在一起的便捷脚本使用单节点的ZooKeeper实例。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\zookeeper-server-start.bat config\zookeeper.properties</span><br></pre></td></tr></tbody></table></figure><p>ZooKeeper成功启动，并绑定到端口<code>2181</code>。该端口是ZooKeeper的默认端口，可以在<code>config\zookeeper.properties</code>中修改<code>clientPort</code>来修改监听端口。</p><p>启动Kafka服务器：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-server-start.bat config\server.properties</span><br></pre></td></tr></tbody></table></figure><blockquote><p>windows环境下启动命令中的配置文件路径 <code>.properties</code> 需要 <code>..\..\xx.properties</code>。</p></blockquote><h4 id="第3步：创建一个主题"><a href="#第3步：创建一个主题" class="headerlink" title="第3步：创建一个主题"></a>第3步：创建一个主题</h4><p>创建一个名为“HelloWord”的主题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic HelloWord</span><br></pre></td></tr></tbody></table></figure><p>通过运行<code>list topic</code>命令查询创建的主题：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-topics.bat --list --zookeeper localhost:2181</span><br></pre></td></tr></tbody></table></figure><p>或者也可以将代理配置设置为发布不存在的主题是自动创建主题。</p><h4 id="第4步：启动一个生产者并发送消息"><a href="#第4步：启动一个生产者并发送消息" class="headerlink" title="第4步：启动一个生产者并发送消息"></a>第4步：启动一个生产者并发送消息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic HelloWord</span><br><span class="line">This is a message</span><br><span class="line">hello,my is producer</span><br></pre></td></tr></tbody></table></figure><h4 id="第5步：启动一个消费者并接收消息"><a href="#第5步：启动一个消费者并接收消息" class="headerlink" title="第5步：启动一个消费者并接收消息"></a>第5步：启动一个消费者并接收消息</h4><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic HelloWord --from-beginning</span><br><span class="line">This is a message</span><br><span class="line">hello,my is producer</span><br></pre></td></tr></tbody></table></figure><h3 id="Kafka-集群配置"><a href="#Kafka-集群配置" class="headerlink" title="Kafka 集群配置"></a>Kafka 集群配置</h3><ol><li>配置 Kafka 的 Zookeeper 地址 <code>zookeeper.connect</code> 。Zookeeper集群可通过 <code>,</code>  分开。</li></ol><p><code>192.168.1.100</code> 和 <code>192.168.1.101</code> Zookeeper 配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">############################# Zookeeper #############################</span><br><span class="line"></span><br><span class="line"># Zookeeper connection string (see zookeeper docs for details).</span><br><span class="line"># This is a comma separated host:port pairs, each corresponding to a zk</span><br><span class="line"># server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".</span><br><span class="line"># You can also append an optional chroot string to the urls to specify the</span><br><span class="line"># root directory for all kafka znodes.</span><br><span class="line">zookeeper.connect=192.168.1.200:2181</span><br><span class="line"></span><br><span class="line"># Timeout in ms for connecting to zookeeper</span><br><span class="line">zookeeper.connection.timeout.ms=6000</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>修改 <code>broker.id</code> ， <code>broker.id</code> 在集群中必须是唯一的。</li></ol><p><code>192.168.1.100</code> 配置 ：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id=0</span><br></pre></td></tr></tbody></table></figure><p><code>192.168.1.101</code> 配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The id of the broker. This must be set to a unique integer for each broker.</span><br><span class="line">broker.id=1</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li><code>listeners</code> 写入本机IP，集群中完成节点间通讯使用。</li></ol><p><code>192.168.1.100</code> 配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name://host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">listeners=PLAINTEXT://192.168.1.100:9092</span><br></pre></td></tr></tbody></table></figure><p><code>192.168.1.101</code> 配置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># The address the socket server listens on. It will get the value returned from </span><br><span class="line"># java.net.InetAddress.getCanonicalHostName() if not configured.</span><br><span class="line">#   FORMAT:</span><br><span class="line">#     listeners = listener_name://host_name:port</span><br><span class="line">#   EXAMPLE:</span><br><span class="line">#     listeners = PLAINTEXT://your.host.name:9092</span><br><span class="line">listeners=PLAINTEXT://192.168.1.101:9092</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>查询 Kafka 集群节点部署情况。</li></ol><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">></span>zookeeper-shell.sh 192.168.1.200:2181</span><br><span class="line">...</span><br><span class="line"><span class="meta">></span>ls /brokers/ids</span><br><span class="line">[0, 1]</span><br><span class="line"><span class="meta">></span>get /controller</span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><p><code>ls /brokers/ids</code> 查询注册了 <code>zookeeper</code> 节点的 <code>broker.id</code> 。</p><p><code>get /controller</code> 查询 leader，master 节点。</p><h3 id="异常及处理"><a href="#异常及处理" class="headerlink" title="异常及处理"></a>异常及处理</h3><ol><li>启动Kafka服务，命令窗口提示错误：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-server-start.bat config\server.properties</span><br><span class="line">错误: 找不到或无法加载主类 Files\Java\jdk1.7.0_75\lib\dt.jar;C:\Program</span><br></pre></td></tr></tbody></table></figure><p>网上查找解决办法，修改<code>kafka-server-satrt.bat</code>：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp %CLASSPATH% %KAFKA_OPTS% %*</span><br><span class="line">修改为：</span><br><span class="line">set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp "%CLASSPATH%" %KAFKA_OPTS% %*</span><br></pre></td></tr></tbody></table></figure><p>给上述代码段的<code>%CLASSPATH%</code>添加双引号<code>""</code>。</p><ol start="2"><li>启动生产者时Kafka报错：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">>bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic HelloWord</span><br><span class="line">WARN [Consumer clientId=consumer-1, groupId=console-consumer-950] Connection to node -1 could not be established. Broker may not be available.</span><br></pre></td></tr></tbody></table></figure><p>因为配置文件<code>conf\server.properties</code>没有启用<code>PLAINTEXT</code>，修改配置文件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#listeners=PLAINTEXT://:9092</span><br><span class="line">listeners=PLAINTEXT://localhost:9092</span><br></pre></td></tr></tbody></table></figure><h3 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h3><ul><li><a href="https://kafka.apache.org" target="_blank" rel="noopener">Kafka官网</a></li><li><a href="https://zh.wikipedia.org/wiki/Kafka" target="_blank" rel="noopener">Kafka维基百科</a></li><li><a href="https://blog.csdn.net/cx2932350/article/details/78870135" target="_blank" rel="noopener">[Kafka][错误: 找不到或无法加载主类 Files\Java\jdk1.8.0_101\lib\dt.jar;C:\Program]</a></li><li><a href="https://blog.csdn.net/getyouwant/article/details/79000524" target="_blank" rel="noopener">WARN [Consumer clientId=consumer-1, groupId=console-consumer-950] Connection to node -1 could not be</a></li><li><a href="https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying" target="_blank" rel="noopener">The Log: What every software engineer should know about real-time data’s unifying abstraction</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      Kafka简介及入门
    
    </summary>
    
      <category term="Apache Kafka" scheme="https://blog.xiguo.wang/categories/Apache-Kafka/"/>
    
    
      <category term="Apache" scheme="https://blog.xiguo.wang/tags/Apache/"/>
    
      <category term="Kafka" scheme="https://blog.xiguo.wang/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>梅林固件编写cru脚本清理高速缓存重启路由</title>
    <link href="https://blog.xiguo.wang/2018/04/08/Merlin-cru/"/>
    <id>https://blog.xiguo.wang/2018/04/08/Merlin-cru/</id>
    <published>2018-04-08T05:23:10.000Z</published>
    <updated>2018-04-24T06:20:32.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="R6300V2-梅林RT-AC68U-定时清理高速缓存、每天重启路由"><a href="#R6300V2-梅林RT-AC68U-定时清理高速缓存、每天重启路由" class="headerlink" title="R6300V2_梅林RT-AC68U 定时清理高速缓存、每天重启路由"></a>R6300V2_梅林RT-AC68U 定时清理高速缓存、每天重启路由</h2><p>刷梅林有几个月了，第一次问题出是在连续使用30多天后，发现手机能连接路由器但不能上网，不能访问路由器管理页面。连接不上网络的问题需要手动重启路由器，很麻烦，尤其是人不在家想连接家里的NAS和摄像头没办法远程重启路由器。出门在外，顺子(喵)独自在家不放心。本来想有什么网络监控设备，找了一圈发现可以用路由器脚本定时检测，自动重启解决。暂时没有时间整理编写定时检测监本，先用定时清理高速缓存和每天重启脚本用一段时间看看。</p><h3 id="使用WinSCP登录路由器"><a href="#使用WinSCP登录路由器" class="headerlink" title="使用WinSCP登录路由器"></a>使用WinSCP登录路由器</h3><p>配置路由器开启<code>SSH链接</code>：登录路由器管理界面–><code>系统管理</code>–><code>系统设置</code>–><code>SSH Daemon</code>–><code>Enable SSH</code>选择开启<code>SSH</code>访问。</p><p>使用工具<code>WinSCP</code>选择<code>SCP</code>访问，端口配置与<code>SSH</code>配置相同，使用路由器用户名和密码登录。</p><h3 id="编写路由器监控脚本"><a href="#编写路由器监控脚本" class="headerlink" title="编写路由器监控脚本"></a>编写路由器监控脚本</h3><blockquote><p>下面新建sh文件全部使用utf-8编码，设置文件0755权限</p></blockquote><p>使用<code>WinSCP</code>登录路由器后，进入<code>/jffs/scripts/</code>目录，使用内置编辑器新建清除缓存文件<code>clean.sh</code>，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">sync</span><br><span class="line">echo 3 > /proc/sys/vm/drop_caches</span><br></pre></td></tr></tbody></table></figure><p>新建定时文件<code>cru.sh</code>，内容如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">cru a clean "0 */4 * * * /bin/sh /jffs/scripts/clean.sh"</span><br><span class="line">cru a reboot "0 4 * * * /sbin/reboot"</span><br></pre></td></tr></tbody></table></figure><p>上面代码的意思是：</p><ol><li>每4小时清理一次缓存。</li><li>每天临晨4点重启路由器。</li></ol><p>按下图在路由器管理界面Tools-Script里将<code>cru.sh</code>添加到开机启动：</p><p><img src="/images/Merlin-0.png" alt="Merlin"></p><p>然后重启机器，或者断开WAN后重连。</p><p>配置完成后为安全性考虑，请关闭<code>SSH</code>访问链接。</p><h3 id="修改NTP服务器"><a href="#修改NTP服务器" class="headerlink" title="修改NTP服务器"></a>修改NTP服务器</h3><p>梅林自带NTP服务器地址<code>pool.ntp.org</code>在国内访问并不是很好，经常会有访问不了的情况导致时间不同步，重启后无法链接WAN的问题，修改NTP服务器地址为<code>time.pool.aliyun.com</code>，修改后半个多月了，没有发生重启后无法WAN上网的问题。</p><p><img src="/images/Merlin-1.png" alt="Merlin"></p><h3 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h3><ul><li><a href="http://xow.myds.me:88/emlog/?post=37" target="_blank" rel="noopener">梅林系统手动编写cru定时脚本 自动重启/释放内存</a></li><li><a href="https://jamesqi.com/%E5%8D%9A%E5%AE%A2/OpenWRT%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B8%AD%E7%9B%91%E6%8E%A7%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%B9%B6%E9%87%8D%E5%90%AF%E7%9A%84%E8%84%9A%E6%9C%AC" target="_blank" rel="noopener">OpenWRT路由器中监控网络服务并重启的脚本</a></li><li><a href="http://koolshare.cn/thread-136416-1-1.html" target="_blank" rel="noopener">梅林重起后一定几率无法访问Internet，我的解决办法。</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      编写cru脚本定时清理路由高速缓存、每天重启路由
    
    </summary>
    
      <category term="Merlin" scheme="https://blog.xiguo.wang/categories/Merlin/"/>
    
    
      <category term="Merlin" scheme="https://blog.xiguo.wang/tags/Merlin/"/>
    
      <category term="cru" scheme="https://blog.xiguo.wang/tags/cru/"/>
    
  </entry>
  
  <entry>
    <title>JavaMail发送邮件</title>
    <link href="https://blog.xiguo.wang/2018/04/04/JavaMailUtils/"/>
    <id>https://blog.xiguo.wang/2018/04/04/JavaMailUtils/</id>
    <published>2018-04-04T05:23:10.000Z</published>
    <updated>2018-04-04T05:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaMail是Sun公司提供给开发人员在程序中处理Email的API，JavaMail未加入到JDK中，需要自己下载使用。</p><h2 id="jar包下载"><a href="#jar包下载" class="headerlink" title="jar包下载"></a>jar包下载</h2><p>配置<code>maven</code>信息：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependencies</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">groupId</span>></span>com.sun.mail<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">artifactId</span>></span>javax.mail<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">version</span>></span>1.6.1<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">dependency</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependencies</span>></span></span><br></pre></td></tr></tbody></table></figure><h2 id="Java代码段"><a href="#Java代码段" class="headerlink" title="Java代码段"></a>Java代码段</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> javax.activation.DataHandler;</span><br><span class="line"><span class="keyword">import</span> javax.activation.DataSource;</span><br><span class="line"><span class="keyword">import</span> javax.activation.FileDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.BodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Message.RecipientType;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Multipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeBodyPart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMultipart;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeUtility;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> cn.com.****.basis.utils.Constants;</span><br><span class="line"><span class="keyword">import</span> com.sun.mail.util.MailSSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wxg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年4月4日 上午10:04:18 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@explain</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaMailUtils</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(JavaMailUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String OUTPUT = Constants.emailProperties.jsp_getValue(<span class="string">"output"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String MAILSERVER = Constants.emailProperties.jsp_getValue(<span class="string">"mailServer"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOGINACCOUNT = Constants.emailProperties.jsp_getValue(<span class="string">"loginAccount"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOGINAUTHCODE = Constants.emailProperties.jsp_getValue(<span class="string">"loginAuthCode"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String Sender = Constants.emailProperties.jsp_getValue(<span class="string">"sender"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] RECIPIENTS = Constants.emailProperties.jsp_getValue(<span class="string">"recipient"</span>).split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EMAILCONTENTTYPE = <span class="string">"text/html;charset=utf-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>:       sendEmail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">                     邮件发送工具</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> mailServer       邮件服务器的主机名:如 "smtp.**.com"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> loginAccount     登录邮箱的账号:如 "******@***.com"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> loginAuthCode    登录邮箱，账号设置那里"生成授权码"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> sender           发件人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> recipients       收件人:支持群发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> emailSubject     邮件的主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> emailContent     邮件的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> emailContentType 邮件内容的类型,支持纯文本:"text/plain;charset=utf-8";带有Html格式的内容:"text/html;charset=utf-8";</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@param</span> attachment       邮件附件，目录下所有文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:       <span class="doctag">@return</span>                 true or false</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:       boolean   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendEmail</span><span class="params">(String mailServer, <span class="keyword">final</span> String loginAccount, <span class="keyword">final</span> String loginAuthCode, String sender, String[] recipients, String emailSubject, String emailContent, String emailContentType, File[] attachment)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            <span class="comment">// 跟smtp服务器建立连接</span></span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            <span class="comment">// 设置邮件服务器主机名</span></span><br><span class="line">            properties.setProperty(<span class="string">"mail.smtp.host"</span>, mailServer);</span><br><span class="line">            <span class="comment">// 发送服务器身份验证，采用用户名和密码方式</span></span><br><span class="line">            properties.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</span><br><span class="line">            <span class="comment">// 发送邮件协议名称</span></span><br><span class="line">            properties.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"smtp"</span>);</span><br><span class="line">            <span class="comment">// 开启SSL加密</span></span><br><span class="line">            MailSSLSocketFactory mailSSLSocketFactory = <span class="keyword">new</span> MailSSLSocketFactory();</span><br><span class="line">            mailSSLSocketFactory.setTrustAllHosts(<span class="keyword">true</span>);</span><br><span class="line">            properties.put(<span class="string">"mail.smtp.ssl.enable"</span>, <span class="string">"true"</span>);</span><br><span class="line">            properties.put(<span class="string">"mail.smtp.ssl.socketFactory"</span>, mailSSLSocketFactory);</span><br><span class="line">            <span class="comment">// 创建session</span></span><br><span class="line">            Session session = Session.getDefaultInstance(properties, <span class="keyword">new</span> Authenticator(){</span><br><span class="line">                <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span>{</span><br><span class="line">                    PasswordAuthentication passwordAuth = </span><br><span class="line">                        <span class="keyword">new</span> PasswordAuthentication(loginAccount, loginAuthCode);</span><br><span class="line">                    <span class="keyword">return</span> passwordAuth;</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line">            <span class="comment">// 设置打开调试状态</span></span><br><span class="line">            session.setDebug(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 创建一封邮件</span></span><br><span class="line">            MimeMessage mimeMessage = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发件人</span></span><br><span class="line">            mimeMessage.setFrom(<span class="keyword">new</span> InternetAddress(sender));</span><br><span class="line">            <span class="comment">// 收件人</span></span><br><span class="line">            InternetAddress[] recipientsEmail = <span class="keyword">new</span> InternetAddress[recipients.length];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i < recipients.length;i++){</span><br><span class="line">                recipientsEmail[i] = <span class="keyword">new</span> InternetAddress(recipients[i]);</span><br><span class="line">            }</span><br><span class="line">            mimeMessage.setRecipients(RecipientType.TO, recipientsEmail);</span><br><span class="line">            <span class="comment">// 抄送人</span></span><br><span class="line"><span class="comment">//            mimeMessage.setRecipients(RecipientType.CC, recipientsEmail);</span></span><br><span class="line">            <span class="comment">// 设置多个密送地址</span></span><br><span class="line"><span class="comment">//            mimeMessage.setRecipients(RecipientType.BCC, recipientsEmail);</span></span><br><span class="line">            <span class="comment">// 发送日期  </span></span><br><span class="line">            mimeMessage.setSentDate(<span class="keyword">new</span> Date()); </span><br><span class="line">            <span class="comment">// 设置邮件标题</span></span><br><span class="line">            mimeMessage.setSubject(emailSubject);</span><br><span class="line">            <span class="comment">// 添加正文和附件</span></span><br><span class="line">            Multipart multipart = <span class="keyword">new</span> MimeMultipart();</span><br><span class="line">            <span class="comment">// 添加邮件正文 </span></span><br><span class="line">            BodyPart contentPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">            contentPart.setContent(emailContent, emailContentType);</span><br><span class="line">            multipart.addBodyPart(contentPart);</span><br><span class="line">            <span class="comment">// 设置附件</span></span><br><span class="line">            BodyPart attachmentBodyPart = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 添加附件的内容</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != attachment && attachment.length != <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">for</span> (File file : attachment) {</span><br><span class="line">                    attachmentBodyPart = <span class="keyword">new</span> MimeBodyPart();</span><br><span class="line">                    DataSource source = <span class="keyword">new</span> FileDataSource(file);</span><br><span class="line">                    attachmentBodyPart.setDataHandler(<span class="keyword">new</span> DataHandler(source));</span><br><span class="line">                    <span class="comment">// MimeUtility.encodeWord可以避免文件名乱码</span></span><br><span class="line">                    attachmentBodyPart.setFileName(MimeUtility.encodeWord(file.getName()));</span><br><span class="line">                    multipart.addBodyPart(attachmentBodyPart);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 将multipart对象放到message中</span></span><br><span class="line">            mimeMessage.setContent(multipart);</span><br><span class="line">            <span class="comment">// 设置邮件内容</span></span><br><span class="line"><span class="comment">//            mimeMessage.setContent(emailContent, emailContentType);</span></span><br><span class="line">            <span class="comment">// 发送邮件</span></span><br><span class="line">            Transport.send(mimeMessage);</span><br><span class="line">            log.error(<span class="string">"邮件发送成功"</span>);</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        }<span class="keyword">catch</span>(Exception e){</span><br><span class="line">            log.error(<span class="string">"邮件发送失败: "</span> + e.getMessage(), e);</span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Title</span>:      sendEmail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment">                    发送普通邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:      <span class="doctag">@param</span> emailSubject    主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:      <span class="doctag">@param</span> emailContent    内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:      <span class="doctag">@return</span>   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>:      boolean   </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">sendEmail</span><span class="params">(String emailSubject, String emailContent)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(OUTPUT.equals(<span class="string">"true"</span>)){</span><br><span class="line"><span class="comment">//            File file = new File("D:\\中文cs");</span></span><br><span class="line"><span class="comment">//            File[] files = file.listFiles();</span></span><br><span class="line">            <span class="keyword">return</span> sendEmail(MAILSERVER, LOGINACCOUNT, LOGINAUTHCODE, Sender,</span><br><span class="line">                    RECIPIENTS, emailSubject, emailContent, EMAILCONTENTTYPE,</span><br><span class="line">                    <span class="keyword">null</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>需要注意的是，在本机<code>junit</code>测试配置是正常的，但是启动服务后发送邮件程序异常，日志如下：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">java.lang.UnsupportedOperationException: Method not yet implemented</span><br><span class="line">    at javax.mail.internet.MimeMessage.<init>(MimeMessage.java:89) ~[geronimo-spec-javamail-1.3.1-rc3.jar:1.3.1-rc3]</span><br><span class="line">    at cn.com.****.basis.utils.JavaMailUtils.sendEmail(JavaMailUtils.java:93) [classes/:na]</span><br><span class="line">    at cn.com.****.basis.utils.JavaMailUtils.sendEmail(JavaMailUtils.java:159) [classes/:na]</span><br><span class="line">    at cn.com.****.********.controller.CreateXmlData.createXmlAll(CreateXmlData.java:174) [classes/:na]</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_75]</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_75]</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_75]</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_75]</span><br><span class="line">    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:777) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:706) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) [servlet-api.jar:na]</span><br><span class="line">    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) [servlet-api.jar:na]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-websocket.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.35]</span><br><span class="line">    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.35]</span><br><span class="line">    at org.springframework.orm.hibernate4.support.OpenSessionInViewFilter.doFilterInternal(OpenSessionInViewFilter.java:151) [spring-orm-4.1.6.RELEASE.jar:4.1.6.RELEASE]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.35]</span><br><span class="line">    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.5.RELEASE.jar:4.1.5.RELEASE]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:528) [catalina.jar:8.0.35]</span><br><span class="line">    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1099) [tomcat-coyote.jar:8.0.35]</span><br><span class="line">    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672) [tomcat-coyote.jar:8.0.35]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520) [tomcat-coyote.jar:8.0.35]</span><br><span class="line">    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476) [tomcat-coyote.jar:8.0.35]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_75]</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_75]</span><br><span class="line">    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-util.jar:8.0.35]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:745) [na:1.7.0_75]</span><br></pre></td></tr></tbody></table></figure><p>经过查询是jar冲突导致的，定位到geronimo-spec-javamail.jar问题，通过<code>maven</code>的<code>exclusions</code>标签注释掉该jar包，问题解决。配置如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag"><<span class="name">dependency</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">groupId</span>></span>com.cloudhopper.proxool<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">artifactId</span>></span>proxool<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">version</span>></span>0.9.1<span class="tag"></<span class="name">version</span>></span></span><br><span class="line">    <span class="comment"><!-- 这个就是我们要排除依赖包，解决jar包冲突 --></span></span><br><span class="line">    <span class="tag"><<span class="name">exclusions</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">exclusion</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>geronimo-spec<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>geronimo-spec-javamail<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">exclusion</span>></span></span><br><span class="line">        <span class="tag"><<span class="name">exclusion</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">groupId</span>></span>geronimo-spec<span class="tag"></<span class="name">groupId</span>></span></span><br><span class="line">            <span class="tag"><<span class="name">artifactId</span>></span>geronimo-spec-jms<span class="tag"></<span class="name">artifactId</span>></span></span><br><span class="line">        <span class="tag"></<span class="name">exclusion</span>></span></span><br><span class="line">    <span class="tag"></<span class="name">exclusions</span>></span></span><br><span class="line"><span class="tag"></<span class="name">dependency</span>></span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      通过JavaMail实现发送邮件
    
    </summary>
    
      <category term="Java" scheme="https://blog.xiguo.wang/categories/Java/"/>
    
    
      <category term="Java" scheme="https://blog.xiguo.wang/tags/Java/"/>
    
      <category term="JavaUtils" scheme="https://blog.xiguo.wang/tags/JavaUtils/"/>
    
      <category term="邮件" scheme="https://blog.xiguo.wang/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>使用Travis自动部署Hexo</title>
    <link href="https://blog.xiguo.wang/2018/03/30/GitHubPages-Travis/"/>
    <id>https://blog.xiguo.wang/2018/03/30/GitHubPages-Travis/</id>
    <published>2018-03-30T08:06:04.000Z</published>
    <updated>2018-03-30T08:06:04.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="Travis配置"><a href="#Travis配置" class="headerlink" title="Travis配置"></a>Travis配置</h2><h3 id="GItHub创建Access-Token"><a href="#GItHub创建Access-Token" class="headerlink" title="GItHub创建Access Token"></a>GItHub创建Access Token</h3><p>登录<a href="https://github.com" target="_blank" rel="noopener">GItHub</a>–><strong>GitHub用户头像</strong>–><strong>Setting</strong>–><strong>Developer settings</strong>–><strong>Personal access tokens</strong>–><strong>Generate new token</strong></p><p><img src="/images/GitHubPages-Travis-1.png" alt="GitHub"></p><p><img src="/images/GitHubPages-Travis-2.png" alt="GitHub"></p><p>勾选<code>repo</code>及<code>user:email</code>点击创建。生成的token只显示一次，所以需要先保存起来后面会用到。</p><h3 id="Travis-CI配置"><a href="#Travis-CI配置" class="headerlink" title="Travis CI配置"></a>Travis CI配置</h3><blockquote><p>配置Travis公共仓库服务：<a href="https://travis-ci.org/" target="_blank" rel="noopener">travis-ci.org</a>，配置Travis私有化仓库服务：<a href="https://travis-ci.com/" target="_blank" rel="noopener">travis-ci.com</a></p></blockquote><p>这里我们使用公共仓库服务<a href="https://travis-ci.org/" target="_blank" rel="noopener">travis-ci.org</a></p><p>打开<a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a>网站，使用GItHub账号登录，点击<code>Sync account</code>会显示GitHub项目列表。选择博客项目开启Travis支持。</p><p>点击项目找到<code>More options</code>中的<code>Setting</code>开启<code>Build only if .travis.yml is present</code>和<code>Build pushed branches</code>。</p><p><img src="/images/GitHubPages-Travis-3.png" alt="Travis"></p><p>在<code>Environment Variables</code>创建环境变量<code>TravisCIToken</code>值为在GItHub创建的Access Token的token值。<strong>不要勾选</strong><code>Display value in build log</code>，否则会在日志文件中暴露 <code>token</code> 信息。</p><p><img src="/images/GitHubPages-Travis-4.png" alt="Travis"></p><h3 id="创建-travis-yml文件"><a href="#创建-travis-yml文件" class="headerlink" title="创建.travis.yml文件"></a>创建.travis.yml文件</h3><blockquote><p>注意yml文件中不能使用<code>tab</code>进行缩进，使用空格缩进，<code>:</code>后有一个空格。</p></blockquote><p>Hexo根目录blog文件夹内创建.travis.yml：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">anguage:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">    apt:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    directories:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">export</span> <span class="string">TZ='Asia/Shanghai'</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="bullet">-g</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">./publish-to-gh-pages.sh</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">    only:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/<yourname>/<yourname>.github.io.git</span></span><br></pre></td></tr></tbody></table></figure><p>Hexo根目录blog文件夹内创建publish-to-gh-pages.sh：</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -ev</span><br><span class="line"><span class="comment"># get clone master</span></span><br><span class="line">git <span class="built_in">clone</span> https://<span class="variable">${GH_REF}</span> .deploy_git</span><br><span class="line"><span class="built_in">cd</span> .deploy_git</span><br><span class="line">git checkout master</span><br><span class="line"><span class="built_in">cd</span> ../</span><br><span class="line">mv .deploy_git/.git/ ./public/</span><br><span class="line"><span class="built_in">cd</span> ./public</span><br><span class="line">git config user.name <span class="string">"<yourname>"</span></span><br><span class="line">git config user.email <span class="string">"<youremail>"</span></span><br><span class="line"><span class="comment"># add commit timestamp</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"Travis CI Auto Builder at `date +"</span>%Y-%m-%d %H:%M<span class="string">"`"</span></span><br><span class="line">git push --force --quiet <span class="string">"https://<span class="variable">${TravisCIToken}</span>@<span class="variable">${GH_REF}</span>"</span> master:master</span><br></pre></td></tr></tbody></table></figure><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><ul><li>打开Git Bash</li></ul><blockquote><p>以下操作全部在Hexo根目录blog文件夹内执行</p></blockquote><ul><li>创建远程分支</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></tbody></table></figure><ul><li>初始化本地仓库：</li></ul><blockquote><p>删除原来部署时产生的.git文件夹（隐藏文件夹）</p></blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></tbody></table></figure><ul><li>关联远程仓库</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:<yourname>/<yourname>.github.io.git</span><br></pre></td></tr></tbody></table></figure><ul><li>推送仓库</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add . # 添加文件</span><br><span class="line">$ git commit -m "first import" # 编写注释</span><br><span class="line">$ git push -u origin hexo # 推送至远程仓库hexo分支</span><br></pre></td></tr></tbody></table></figure><p>推送成功后可以在<a href="https://travis-ci.org/" target="_blank" rel="noopener">travis-ci.org</a>后台查看自动部署情况。</p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://www.jianshu.com/p/7f05b452fd3a" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(三)-使用Travis自动部署Hexo(1)</a></li><li><a href="https://www.jianshu.com/p/fff7b3384f46" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(四)-使用Travis自动部署Hexo(2)</a></li><li><a href="http://www.itfanr.cc/2017/08/09/using-travis-ci-automatic-deploy-hexo-blogs/" target="_blank" rel="noopener">使用Travis CI自动部署Hexo博客</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      Travis持续集成自动部署Hexo
    
    </summary>
    
      <category term="Hexo博客" scheme="https://blog.xiguo.wang/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://blog.xiguo.wang/tags/Hexo/"/>
    
      <category term="Travis" scheme="https://blog.xiguo.wang/tags/Travis/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://blog.xiguo.wang/2018/03/28/HexoBlogBuild-Next/"/>
    <id>https://blog.xiguo.wang/2018/03/28/HexoBlogBuild-Next/</id>
    <published>2018-03-28T08:33:04.000Z</published>
    <updated>2018-03-28T08:33:04.000Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><blockquote><p>已安装过的用户略过</p></blockquote><ul><li>windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a></li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><ul><li>windows：下载并安装 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li></ul><h2 id="GitHub仓库配置"><a href="#GitHub仓库配置" class="headerlink" title="GitHub仓库配置"></a>GitHub仓库配置</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><blockquote><p>GitHub仓库名称必须是 <yourname>.github.io</p></blockquote><h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><ol><li>打开<strong>GitBash</strong>终端，设置<code>user.name</code>和<code>user.email</code></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "你的GitHub用户名"</span><br><span class="line">$ git config --global user.email "你的GitHub注册邮箱"</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>生成ssh密钥：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C "你的GitHub注册邮箱"</span><br></pre></td></tr></tbody></table></figure><p>一路回车，创建的文件windows 10系统在<code>C:\Users\windows用户\.ssh</code>，里面有新创建的私钥：<strong>id_rsa</strong>和公钥：<strong>id_rsa.pub</strong>。</p><ol start="3"><li>点击<strong>GitHub用户头像</strong>–><strong>Setting</strong>–><strong>SSH and GPG keys</strong>–><strong>New SSH key</strong>，将公钥 <strong>id_rsa.pub</strong> 中的内容复制到<strong>key</strong>文本框中点击保存。</li><li>测试SSH：</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></tbody></table></figure><p>会出现确认信息，确认无误输入<code>yes</code>后回车。配置完成。</p><h2 id="Hexo安装及配置"><a href="#Hexo安装及配置" class="headerlink" title="Hexo安装及配置"></a>Hexo安装及配置</h2><h3 id="创建博客文件夹"><a href="#创建博客文件夹" class="headerlink" title="创建博客文件夹"></a>创建博客文件夹</h3><ol><li>创建博客文件夹，命名为blog</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> mkdir blog</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>进入blog文件夹</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> cd blog</span><br></pre></td></tr></tbody></table></figure><blockquote><p>以下操作全部在blog文件夹内执行</p></blockquote><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> npm install -g hexo-cli</span><br></pre></td></tr></tbody></table></figure><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> hexo init</span><br></pre></td></tr></tbody></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> npm install</span><br></pre></td></tr></tbody></table></figure><h3 id="生成静态页"><a href="#生成静态页" class="headerlink" title="生成静态页"></a>生成静态页</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> hexo generate</span><br></pre></td></tr></tbody></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> hexo server</span><br></pre></td></tr></tbody></table></figure><p>启动成功，可以通过浏览器地址栏输入：<code>http://localhost:4000/</code> ，看到Hexo的示例页。使用<code>Ctrl+c</code>停止预览服务。</p><h3 id="部署Hexo"><a href="#部署Hexo" class="headerlink" title="部署Hexo"></a>部署Hexo</h3><ol><li>编辑Hexo配置文件<strong>_config.yml</strong>，找到下面内容：</li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span></span><br></pre></td></tr></tbody></table></figure><p>添加GitHub仓库信息：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:<yourname>/<yourname>.github.io.git</span> <span class="comment">#github仓库地址</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span> <span class="comment">#github分支</span></span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>安装Git插件</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> npm install hexo-deployer-git --save</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>部署</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">> hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>部署成功，通过<code>http://<youtname>.github.io</code>访问。</p><h3 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">> hexo new <title> #新建文章</span><br><span class="line">> hexo generate #生成静态页面 hexo g</span><br><span class="line">> hexo clean #清除生成内容</span><br><span class="line">> hexo server #启动服务 hexo s</span><br><span class="line">> hexo deploy #部署 hexo d</span><br><span class="line">> hexo clean && hexo g -d #清除、生成、部署</span><br></pre></td></tr></tbody></table></figure><h3 id="Hexo插件"><a href="#Hexo插件" class="headerlink" title="Hexo插件"></a>Hexo插件</h3><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>安装node插件</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></tbody></table></figure><p>在需要顶置的文章的<code>Front-matter</code>中加<code>top: true</code>。</p><h4 id="显示版权信息"><a href="#显示版权信息" class="headerlink" title="显示版权信息"></a>显示版权信息</h4><p>修改<code>主题配置文件</code>中<code>enable: false</code>为<code>enable: true</code>。</p><p>修改<code>站点配置文件</code>中<code>url:</code>为<code>url: http://<yourwebsite></code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Declare license on posts</span></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">3.0</span></span><br><span class="line"><span class="attr">  license_url:</span> <span class="attr">https://creativecommons.org/licenses/by-nc-sa/3.0/</span></span><br></pre></td></tr></tbody></table></figure><h4 id="访问统计功能"><a href="#访问统计功能" class="headerlink" title="访问统计功能"></a>访问统计功能</h4><p>修改<code>主题配置文件</code>中<code>busuanzi_count:</code> 部分。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show PV/UV of the website/page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="comment"># count values only if the other configs are false</span></span><br><span class="line">  <span class="comment"># 全局开关</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># custom uv span for the whole site</span></span><br><span class="line">  <span class="comment"># 页面底部显示站点的UV值</span></span><br><span class="line"><span class="attr">  site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_uv_header:</span> <span class="string">访客数</span> <span class="string"><i</span> <span class="string">class="fa</span> <span class="string">fa-user"></i></span></span><br><span class="line"><span class="attr">  site_uv_footer:</span> <span class="string">人次</span></span><br><span class="line">  <span class="comment"># custom pv span for the whole site</span></span><br><span class="line">  <span class="comment"># 页面底部显示站点的PV值</span></span><br><span class="line"><span class="attr">  site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  site_pv_header:</span> <span class="string">访问量</span> <span class="string"><i</span> <span class="string">class="fa</span> <span class="string">fa-eye"></i></span></span><br><span class="line"><span class="attr">  site_pv_footer:</span> <span class="string">次</span></span><br><span class="line">  <span class="comment"># custom pv span for one page only</span></span><br><span class="line">  <span class="comment"># 文章页面的标题下显示该页面的PV值</span></span><br><span class="line"><span class="attr">  page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  page_pv_header:</span> <span class="string">阅读量</span> <span class="string"><i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"></i></span></span><br><span class="line"><span class="attr">  page_pv_footer:</span> <span class="string">次</span></span><br></pre></td></tr></tbody></table></figure><h4 id="显示文章更新时间"><a href="#显示文章更新时间" class="headerlink" title="显示文章更新时间"></a>显示文章更新时间</h4><p>修改<code>主题配置文件</code>中<code>post_meta</code>部分的<code>updated_at: false</code>为<code>updated_at: true</code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="string">tru</span></span><br></pre></td></tr></tbody></table></figure><p>在需要顶置的文章的<code>Front-matter</code>中加<code>updated:</code>。</p><h4 id="添加文章字数统计"><a href="#添加文章字数统计" class="headerlink" title="添加文章字数统计"></a>添加文章字数统计</h4><p>安装插件：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-wordcount --save</span><br></pre></td></tr></tbody></table></figure><p>修改<code>主题配置文件</code>中<code>post_wordcount</code>部分：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span>   <span class="string">//底部是否显示“总字数”字样</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span>  <span class="string">//文章字数统计</span> <span class="string">默认false</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">false</span>  <span class="string">//文章预计阅读时长（分钟）</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">true</span>  <span class="string">//网站总字数，位于底部</span> <span class="string">默认false</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span> <span class="string">//是否将文章的字数统计信息换行显示</span></span><br></pre></td></tr></tbody></table></figure><p>更多插件可以查阅<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">官方插件页</a></p><h2 id="Next安装及配置"><a href="#Next安装及配置" class="headerlink" title="Next安装及配置"></a>Next安装及配置</h2><h3 id="Next主题安装"><a href="#Next主题安装" class="headerlink" title="Next主题安装"></a>Next主题安装</h3><p>下载稳定版本：<a href="https://github.com/iissnan/hexo-theme-next/releases" target="_blank" rel="noopener">Next发布页面</a></p><p>解压出文件夹，重命名文件夹名称为<code>next</code>，放在<code>blog/themes</code>内。</p><h3 id="Next主题配置"><a href="#Next主题配置" class="headerlink" title="Next主题配置"></a>Next主题配置</h3><blockquote><p>Hexo根目录中<code>_config.yml</code>为<code>站点配置文件</code>，主题包内<code>_config.yml</code>为<code>主题配置文件</code>。</p></blockquote><p>在<code>站点配置文件</code>中找到<code>theme</code>修改值为<code>next</code>。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/ #主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span> <span class="comment">#主题名称 默认landscape</span></span><br></pre></td></tr></tbody></table></figure><p>详细配置说明：<a href="https://theme-next.iissnan.com/getting-started.html#theme-settings" target="_blank" rel="noopener">Next主题设定</a></p><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="https://www.jianshu.com/p/f4cc5866946b" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(一)-附GitHub注册及配置</a></li><li><a href="https://www.jianshu.com/p/dd9ef08b12df" target="_blank" rel="noopener">手把手教从零开始在GitHub上使用Hexo搭建博客教程(二)-Hexo参数设置</a></li><li><a href="http://www.itfanr.cc/2016/09/24/use-github-to-build-hexo-static-blog/" target="_blank" rel="noopener">使用GitHub搭建Hexo静态博客</a></li><li><a href="http://www.itfanr.cc/2017/12/06/hexo-blog-optimization/" target="_blank" rel="noopener">Hexo博客功能优化</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方中文文档</a></li></ul></body></html>]]></content>
    
    <summary type="html">
    
      hexo博客搭建及next主题设置
    
    </summary>
    
      <category term="Hexo博客" scheme="https://blog.xiguo.wang/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="https://blog.xiguo.wang/tags/Hexo/"/>
    
      <category term="Next" scheme="https://blog.xiguo.wang/tags/Next/"/>
    
  </entry>
  
</feed>
